package server;

import java.io.IOException;
import java.net.ServerSocket;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

public class ConcurrentServer {
    private static final int NUM_THREADS = 80;

    public static void main(String[] args) throws IOException {
        ServerSocket serverSocket = new ServerSocket(8000);
        ExecutorService executorService = Executors.newFixedThreadPool(NUM_THREADS);
        List<Future<Void>> futures = new ArrayList<>();

        System.out.println("Server started");

        long startTime = System.currentTimeMillis();

        for (int i = 0; i < NUM_THREADS; i++) {
            int threadID = i + 1;
            futures.add(executorService.submit(new SubClientHandler(serverSocket.accept(), threadID)));
        }

        executorService.shutdown();

        try {
            executorService.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
        } catch (InterruptedException e) {
            System.out.println("Interrupted: " + e);
        }

        long endTime = System.currentTimeMillis();
        System.out.println("All computations completed");

        for (int i = 0; i < NUM_THREADS; i++) {
            try {
                futures.get(i).get();
            } catch (InterruptedException | ExecutionException e) {
                System.out.println("Exception: " + e);
            }
        }

        long delay = endTime - startTime;
        System.out.println("Total time: " + delay + "ms");
    }
}
